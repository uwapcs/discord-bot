on: [push, workflow_dispatch]

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git
            target
          key: ${{ hashFiles('Cargo.toml') }}-${{ matrix.rust }}
      - name: Build the bot
        uses: actions-rs/cargo@v1
        with:
          command: build
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Get release cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ hashFiles('Cargo.toml') }}-release
      - name: Get debug cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ hashFiles('Cargo.toml') }}-stable
      - name: Build in release mode
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            target/release/discord-bot
          key: ${{ github.sha }}

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            target/release/discord-bot
          key: ${{ github.sha }}
      - uses: mattdavis0351/actions/docker-gpr@1.3.1
        if: steps.cache.outputs.cache-hit == 'true'
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          image-name: discord-bot
          tag: latest
      - uses: elgohr/Publish-Docker-Github-Action@v5
        if: steps.cache.outputs.cache-hit == 'true'
        with:
          name: uwapcs/discord-bot
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          snapshot: true
          tag_names: true

  deploy:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Get code
        uses: actions/checkout@v2
      - name: Push config to server
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -avzr --delete
          path: config/
          remote_path: /root/config
          remote_host: ${{ secrets.DEPLOY_ADDRESS }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.SERVER_KEY }}
      - name: Run docker on server
        uses: appleboy/ssh-action@master
        env:
          SECRETS: ${{ secrets.SECRETS }}
        with:
          envs: SECRETS
          host: ${{ secrets.DEPLOY_ADDRESS }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script_stop: true
          script: |
            docker pull uwapcs/discord-bot:latest
            docker create --volumes-from discord-bot -e "SECRET=$SECRETS" --name discord-bot-tmp uwapcs/discord-bot:latest || docker create -e "SECRET=$SECRETS" --name discord-bot-tmp uwapcs/discord-bot:latest
            docker stop discord-bot || true
            docker start discord-bot-tmp
            docker rm discord-bot || true
            docker rename discord-bot-tmp discord-bot
